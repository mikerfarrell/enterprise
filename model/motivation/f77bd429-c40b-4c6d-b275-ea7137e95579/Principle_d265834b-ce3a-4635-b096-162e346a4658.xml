<archimate:Principle
    xmlns:archimate="http://www.archimatetool.com/archimate"
    name="Adaptability and Reuse"
    id="d265834b-ce3a-4635-b096-162e346a4658"
    documentation="Statement:&#xD;&#xA;IT systems are conceived to generate change, and they reflect alterations in laws, social needs, or other types of changes.&#xD;&#xA;Adaptability and flexibility reduce the complexity and promote integration, which improves the company's business activities.&#xD;&#xA;Excessive customization increases costs and reduces the ability to adapt.&#xD;&#xA;&#xD;&#xA;Rationale:&#xD;&#xA;Adhering to this principle has several benefits:&#xD;&#xA;•&#x9;Allows the application to support changes that frequently occur in business processes.&#xD;&#xA;•&#x9;Renders the application architecture more adaptable to IT changes and IT market strengths.&#xD;&#xA;•&#x9;Allows the improvement of business processes.&#xD;&#xA;•&#x9;Promotes a simpler and faster system integration process, with less revision processes.&#xD;&#xA;•&#x9;Allows solutions to evolve to meet business needs and changes&#xD;&#xA;•&#x9;Complex systems with several data and transactional functions are difficult to manage and make changes extremely risky.&#xD;&#xA;The goal is to avoid dependency failures that can result from highly coupled applications.&#xD;&#xA;&#xD;&#xA;Implications:&#xD;&#xA;Initially, the solution might require more time to conceive and greater systemic consideration as operations go beyond the applications' traditional boundaries.&#xD;&#xA;Initial costs might be higher, but the integration process will be less expensive.&#xD;&#xA;Systems will last longer; therefore, the return will be greater.&#xD;&#xA;A system can be suboptimal in the short-term but present optimization gains in the long term.&#xD;&#xA;Adaptability and flexibility performance metrics must be established.&#xD;&#xA;The development of applications based on components must be promoted and facilitated.&#xD;&#xA;A minimum number of suppliers, products, and configurations must be maintained to allow maximum flexibility when implementing changes.&#xD;&#xA;Excessively complex configurations of components, undue customized tuning, and hardware and software customization based on transient, local, or other conditions must all be avoided.&#xD;&#xA;The discipline of configuration must be maintained, sacrificing performance and functionality in some cases.&#xD;&#xA;Resource restrictions must be considered.&#xD;&#xA;&#xD;&#xA;"/>
